// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.14.0
// source: playlist.sql

package db

import (
	"context"
)

const createPlaylist = `-- name: CreatePlaylist :one
INSERT INTO playlist (
    name
) VALUES (
    $1
) RETURNING id, name, created_at
`

func (q *Queries) CreatePlaylist(ctx context.Context, name string) (Playlist, error) {
	row := q.db.QueryRowContext(ctx, createPlaylist, name)
	var i Playlist
	err := row.Scan(&i.ID, &i.Name, &i.CreatedAt)
	return i, err
}

const deletePlaylist = `-- name: DeletePlaylist :exec
DELETE FROM playlist
WHERE id = $1
`

func (q *Queries) DeletePlaylist(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deletePlaylist, id)
	return err
}

const getPlaylist = `-- name: GetPlaylist :one
SELECT id, name, created_at FROM playlist
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetPlaylist(ctx context.Context, id int32) (Playlist, error) {
	row := q.db.QueryRowContext(ctx, getPlaylist, id)
	var i Playlist
	err := row.Scan(&i.ID, &i.Name, &i.CreatedAt)
	return i, err
}

const getPlaylists = `-- name: GetPlaylists :many
SELECT id, name, created_at FROM playlist
`

func (q *Queries) GetPlaylists(ctx context.Context) ([]Playlist, error) {
	rows, err := q.db.QueryContext(ctx, getPlaylists)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Playlist{}
	for rows.Next() {
		var i Playlist
		if err := rows.Scan(&i.ID, &i.Name, &i.CreatedAt); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updatePlaylist = `-- name: UpdatePlaylist :one
UPDATE playlist
SET name = $2
WHERE id = $1 RETURNING id, name, created_at
`

type UpdatePlaylistParams struct {
	ID   int32  `json:"id"`
	Name string `json:"name"`
}

func (q *Queries) UpdatePlaylist(ctx context.Context, arg UpdatePlaylistParams) (Playlist, error) {
	row := q.db.QueryRowContext(ctx, updatePlaylist, arg.ID, arg.Name)
	var i Playlist
	err := row.Scan(&i.ID, &i.Name, &i.CreatedAt)
	return i, err
}
